<?php
/**
 *	Item Validator class.
 *
 *	@author      Raymond van Velzen <raymond@latunyi.com>
 *	@package     LatunyiFramework
 **/

namespace Application\Domain\Entity;

use \System\Core\ValidationRules;
use \System\Core\ValidationRule;
use \System\Core\Helper\Validator;

/**
 * Child class for Item validation.
 */
class ItemValidator extends \System\Core\EntityValidator
{
	/**
	 * Sets up validation rules.
	 */
	public function __construct()
	{
		parent::__construct();
		
		// Use _form to indicate validation that applies to the entity/form as a whole
		$this->addRule(new ValidationRule('_form', 'validateOneThing', 'Something is wrong'));
		
		// Multiple rules can be applied to a field; if one fails, others are skipped
		$this->addRule(new ValidationRule('_form', 'validateAnotherThing', 'Something is very wrong'));

		// Example of a rule that should not be applied to new entities
		$this->addRule(new ValidationRule('id', 'isInteger', 'Invalid ID'), false);
		
		// Rules using standard validation functions from the Validator class
		$this->addRule(new ValidationRule('name', 'isNotEmpty', 'Name is empty'));
		$this->addRule(new ValidationRule('value', 'isAmount', 'Value is not valid'));
		
		// Rule using a custom validation method from ItemValidator class itself
		$this->addRule(new ValidationRule('typeId', 'validateType', 'Invalid type'));
		
		// Example of a validtor that requires the values of multiple fields 
		$this->addRule(new ValidationRule('startDate', 'isValidPeriod', 'Invalid period', array('startDate', 'endDate')));

	}
	
	/**
	 * Determines if this is a new entity or not, then passes actual validation to the parent class,
	 * and returns errors.
	 * 
	 * @param Item $item
	 * @see System\Core.EntityValidator::validate()
	 */
	public function validate(Item $item)
	{
		$isNew = ($item->id == 0);
		parent::validate($item, $isNew);
	}

	/**
	 * Validates the type. Not implemented.
	 * 
	 * @param int $type
	 * @return boolean
	 */
	protected function validateType($type)
	{
		// Do something here to validate the type.
		// If you need something else to do so, like a Repository or the Database,
		// modify the factory method of the controller that uses this validator
		// to pass that object to this validator so you can use it here.

		return true;
	}
}

